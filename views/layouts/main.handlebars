<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meme Magic</title>
    <link href="/output.css" rel="stylesheet"> <!-- Tailwind CSS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>
</head>
<body class="bg-bermuda">

    <header class="text-center p-6">
        <h1 class="text-4xl text-white font-bold">Welcome to Meme Magic!</h1>
        <nav>
            {{#if loggedIn}}
                <button onclick="logout()" class="bg-red-500 text-white font-bold">Logout</button>
            {{else}}
                <a href="/login" class="text-blue-600 bg-midnight font-bold hover:text-green-700 px-4 py-2 rounded">Login</a>
                <a href="/register" class="bg-midnight text-bubble-gum hover:text-yellow-400 font-bold px-4 py-2 rounded">Register</a>
            {{/if}}
        </nav>
    </header>
    <main>
        <div id="content-container"></div>

        <!-- Handlebars template definition -->
        <script id="content-template" type="text/x-handlebars-template">
            <div class="flex flex-col items-center space-y-4">
                <button onclick="generateMeme()" class="bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 shadow-lg">
                    Generate
                </button>

                <div id="result" class="text-center mt-4">{{resultMessage}}</div>
                
                {{#if memeImageUrl}}
                    <div class="flex justify-center mt-4">
                        <img class="max-w-full h-auto" src="{{memeImageUrl}}" alt="Generated Meme">
                    </div>

                    <button onclick="saveMeme('{{memeImageUrl}}', '{{memeName}}')" class="bg-green-500 text-white font-bold py-2 px-4 rounded hover:bg-green-700">Save Meme</button>
                {{/if}}
            </div>
        </script>

        <script>
            // Function to generate memes when the button is clicked
            function generateMeme() {
                fetchAndRenderMeme();
            }

            // Function to fetch memes from Imgflip API and render content
                        function fetchAndRenderMeme() {
                fetch('https://api.imgflip.com/get_memes')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.data.memes.length > 0) {
                            const memes = data.data.memes;
                            const randomIndex = Math.floor(Math.random() * memes.length);
                            const meme = memes[randomIndex];
                            renderContent(`Generated Meme: ${meme.name}`);
                            document.getElementById('content-container').innerHTML += `
                                <img src="${meme.url}" alt="${meme.name}" style="max-width:300px;">
                            `;
                        } else {
                            renderContent('No memes available.');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching memes:', error);
                        renderContent('Error generating meme.');
                    });
            }

            // Function to compile and render the Handlebars template
           function renderContent(resultMessage) {
                const source = document.getElementById('content-template').innerHTML;
                const template = Handlebars.compile(source);
                const context = { resultMessage };
                const html = template(context);
                document.getElementById('content-container').innerHTML = html;
            }

            // Function to save a generated meme
            function saveMeme(imageUrl, name) {
                fetch('/api/memes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        topText: name, // Using the meme's name as top text
                        bottomText: '', // No bottom text
                        imageUrl: imageUrl,
                        templateId: null // Assuming no specific template
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.id) {
                        alert('Meme saved successfully!');
                    } else {
                        alert('Failed to save meme.');
                    }
                })
                .catch(error => {
                    console.error('Error saving meme:', error);
                    alert('Error saving meme.');
                });
            }

            // Function to log out
            function logout() {
                fetch('/api/users/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(() => {
                    location.reload(); // Reload the page after logout
                })
                .catch(error => {
                    console.error('Error logging out:', error);
                });
            }

            // Initial call to render the buttons
            renderContent('Click "Generate" to start');
        </script>
    </main>
</body>
</html>
